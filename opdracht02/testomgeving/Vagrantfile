# -*- mode: ruby -*-
# vi: ft=ruby :

require 'rbconfig'
require 'yaml'

# Set your default base box here
DEFAULT_BASE_BOX = 'bento/fedora-29'

#
# No changes needed below this point
#

VAGRANTFILE_API_VERSION = '2'
PROJECT_NAME = '/' + File.basename(Dir.getwd)

hosts = YAML.load_file('vagrant-hosts.yml')

# {{{ Helper functions

def is_windows
  RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
end

# Set options for the network interface configuration. All values are
# optional, and can include:
# - ip (default = DHCP)
# - netmask (default value = 255.255.255.0
# - mac
# - auto_config (if false, Vagrant will not configure this network interface
# - intnet (if true, an internal network adapter will be created instead of a
#   host-only adapter)
def network_options(host)
  options = {}

  if host.has_key?('ip')
    options[:ip] = host['ip']
    options[:netmask] = host['netmask'] ||= '255.255.255.0'
  else
    options[:type] = 'dhcp'
  end

  if host.has_key?('mac')
    options[:mac] = host['mac'].gsub(/[-:]/, '')
  end
  if host.has_key?('auto_config')
    options[:auto_config] = host['auto_config']
  end
  if host.has_key?('intnet') && host['intnet']
    options[:virtualbox__intnet] = true
  end

  options
end

def custom_synced_folders(vm, host)
  if host.has_key?('synced_folders')
    folders = host['synced_folders']

    folders.each do |folder|
      vm.synced_folder folder['src'], folder['dest'], folder['options']
    end
  end
end

# }}}

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.ssh.insert_key = false
  hosts.each do |host|
    config.vm.define host['name'] do |node|
      node.vm.box = host['box'] ||= DEFAULT_BASE_BOX
      if(host.key? 'box_url')
        node.vm.box_url = host['box_url']
      end

      node.vm.hostname = host['name']
      node.vm.network :private_network, network_options(host)
      config.vm.network "forwarded_port", guest: 80, host: 8080 # Port-Forward Apache
      custom_synced_folders(node.vm, host)
      forwarded_ports(node.vm, host)

      # Add VM to a VirtualBox group
      node.vm.provider :virtualbox do |vb|
        vb.memory = host['memory'] if host.key? 'memory'
        vb.cpus = host['cpus'] if host.key? 'cpus'
        vb.gui = host['gui']
        # WARNING: if the name of the current directory is the same as the
        # host name, this will fail.
        vb.customize ['modifyvm', :id, '--groups', PROJECT_NAME]
      end

      # Run configuration script for the VM
      if host['os'] == "windows"
        # config.vm.guest = :windows
        config.vm.communicator = "winrm"
        config.winrm.username = host['winrm-user'] #"Administrator"
        config.winrm.password = host['winrm-pw'] #"Admin2019"  

        # node.vm.provision 'shell', path: 'provisioning/' + host['name'] + '.ps1', privileged: true
        provision   = "./provisioning"
        iis         = host['iis']
        asp         = host['asp']
        sql         = host['sql']

        config.vm.provision :shell,
        path: provision + "/installiis.ps1",
        args: ["-username " + iis['username'] + " -password " + iis['password'] + " -downloadpath  " + iis['downloadpath']]
        config.vm.provision :shell,
            path: provision + "/installasp.ps1",
            args: ["-asp35 " + asp['asp35'] + " -asp45 " + asp['asp45']]
        config.vm.provision :shell,
            privileged: true,
            path: provision + "/installsqlserver.ps1",
            args: ["-downloadpath " + sql['downloadpath'] + " -instancename " + sql['instancename'] + " -rootpassword "+ sql['rootpassword'] + " -tcpportnr " + sql['tcpportnr'] + " -dbname " + sql['dbname'] + " -username " + sql['username'] + " -password " + sql['password']]

      else

        node.vm.provision 'shell', path: 'provisioning/' + host['name'] + '.sh'
      end
    end
  end
end

